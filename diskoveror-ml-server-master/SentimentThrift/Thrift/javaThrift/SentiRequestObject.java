/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-6-26")
public class SentiRequestObject implements org.apache.thrift.TBase<SentiRequestObject, SentiRequestObject._Fields>, java.io.Serializable, Cloneable, Comparable<SentiRequestObject> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SentiRequestObject");

  private static final org.apache.thrift.protocol.TField MAIN_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("mainText", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TEXT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("textType", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MIDDLE_PARAS_FIELD_DESC = new org.apache.thrift.protocol.TField("middleParas", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LAST_PARA_FIELD_DESC = new org.apache.thrift.protocol.TField("lastPara", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TOP_DOMAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("topDomain", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SUB_DOMAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("subDomain", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SentiRequestObjectStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SentiRequestObjectTupleSchemeFactory());
  }

  public String mainText; // required
  public String textType; // optional
  public String title; // optional
  public String middleParas; // optional
  public String lastPara; // optional
  public String topDomain; // optional
  public String subDomain; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MAIN_TEXT((short)1, "mainText"),
    TEXT_TYPE((short)2, "textType"),
    TITLE((short)3, "title"),
    MIDDLE_PARAS((short)4, "middleParas"),
    LAST_PARA((short)5, "lastPara"),
    TOP_DOMAIN((short)6, "topDomain"),
    SUB_DOMAIN((short)7, "subDomain");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MAIN_TEXT
          return MAIN_TEXT;
        case 2: // TEXT_TYPE
          return TEXT_TYPE;
        case 3: // TITLE
          return TITLE;
        case 4: // MIDDLE_PARAS
          return MIDDLE_PARAS;
        case 5: // LAST_PARA
          return LAST_PARA;
        case 6: // TOP_DOMAIN
          return TOP_DOMAIN;
        case 7: // SUB_DOMAIN
          return SUB_DOMAIN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.TEXT_TYPE,_Fields.TITLE,_Fields.MIDDLE_PARAS,_Fields.LAST_PARA,_Fields.TOP_DOMAIN,_Fields.SUB_DOMAIN};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MAIN_TEXT, new org.apache.thrift.meta_data.FieldMetaData("mainText", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEXT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("textType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MIDDLE_PARAS, new org.apache.thrift.meta_data.FieldMetaData("middleParas", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_PARA, new org.apache.thrift.meta_data.FieldMetaData("lastPara", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOP_DOMAIN, new org.apache.thrift.meta_data.FieldMetaData("topDomain", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUB_DOMAIN, new org.apache.thrift.meta_data.FieldMetaData("subDomain", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SentiRequestObject.class, metaDataMap);
  }

  public SentiRequestObject() {
    this.textType = "microblogs";

    this.title = "";

    this.middleParas = "";

    this.lastPara = "";

    this.topDomain = "";

    this.subDomain = "";

  }

  public SentiRequestObject(
    String mainText)
  {
    this();
    this.mainText = mainText;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SentiRequestObject(SentiRequestObject other) {
    if (other.isSetMainText()) {
      this.mainText = other.mainText;
    }
    if (other.isSetTextType()) {
      this.textType = other.textType;
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetMiddleParas()) {
      this.middleParas = other.middleParas;
    }
    if (other.isSetLastPara()) {
      this.lastPara = other.lastPara;
    }
    if (other.isSetTopDomain()) {
      this.topDomain = other.topDomain;
    }
    if (other.isSetSubDomain()) {
      this.subDomain = other.subDomain;
    }
  }

  public SentiRequestObject deepCopy() {
    return new SentiRequestObject(this);
  }

  @Override
  public void clear() {
    this.mainText = null;
    this.textType = "microblogs";

    this.title = "";

    this.middleParas = "";

    this.lastPara = "";

    this.topDomain = "";

    this.subDomain = "";

  }

  public String getMainText() {
    return this.mainText;
  }

  public SentiRequestObject setMainText(String mainText) {
    this.mainText = mainText;
    return this;
  }

  public void unsetMainText() {
    this.mainText = null;
  }

  /** Returns true if field mainText is set (has been assigned a value) and false otherwise */
  public boolean isSetMainText() {
    return this.mainText != null;
  }

  public void setMainTextIsSet(boolean value) {
    if (!value) {
      this.mainText = null;
    }
  }

  public String getTextType() {
    return this.textType;
  }

  public SentiRequestObject setTextType(String textType) {
    this.textType = textType;
    return this;
  }

  public void unsetTextType() {
    this.textType = null;
  }

  /** Returns true if field textType is set (has been assigned a value) and false otherwise */
  public boolean isSetTextType() {
    return this.textType != null;
  }

  public void setTextTypeIsSet(boolean value) {
    if (!value) {
      this.textType = null;
    }
  }

  public String getTitle() {
    return this.title;
  }

  public SentiRequestObject setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getMiddleParas() {
    return this.middleParas;
  }

  public SentiRequestObject setMiddleParas(String middleParas) {
    this.middleParas = middleParas;
    return this;
  }

  public void unsetMiddleParas() {
    this.middleParas = null;
  }

  /** Returns true if field middleParas is set (has been assigned a value) and false otherwise */
  public boolean isSetMiddleParas() {
    return this.middleParas != null;
  }

  public void setMiddleParasIsSet(boolean value) {
    if (!value) {
      this.middleParas = null;
    }
  }

  public String getLastPara() {
    return this.lastPara;
  }

  public SentiRequestObject setLastPara(String lastPara) {
    this.lastPara = lastPara;
    return this;
  }

  public void unsetLastPara() {
    this.lastPara = null;
  }

  /** Returns true if field lastPara is set (has been assigned a value) and false otherwise */
  public boolean isSetLastPara() {
    return this.lastPara != null;
  }

  public void setLastParaIsSet(boolean value) {
    if (!value) {
      this.lastPara = null;
    }
  }

  public String getTopDomain() {
    return this.topDomain;
  }

  public SentiRequestObject setTopDomain(String topDomain) {
    this.topDomain = topDomain;
    return this;
  }

  public void unsetTopDomain() {
    this.topDomain = null;
  }

  /** Returns true if field topDomain is set (has been assigned a value) and false otherwise */
  public boolean isSetTopDomain() {
    return this.topDomain != null;
  }

  public void setTopDomainIsSet(boolean value) {
    if (!value) {
      this.topDomain = null;
    }
  }

  public String getSubDomain() {
    return this.subDomain;
  }

  public SentiRequestObject setSubDomain(String subDomain) {
    this.subDomain = subDomain;
    return this;
  }

  public void unsetSubDomain() {
    this.subDomain = null;
  }

  /** Returns true if field subDomain is set (has been assigned a value) and false otherwise */
  public boolean isSetSubDomain() {
    return this.subDomain != null;
  }

  public void setSubDomainIsSet(boolean value) {
    if (!value) {
      this.subDomain = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MAIN_TEXT:
      if (value == null) {
        unsetMainText();
      } else {
        setMainText((String)value);
      }
      break;

    case TEXT_TYPE:
      if (value == null) {
        unsetTextType();
      } else {
        setTextType((String)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case MIDDLE_PARAS:
      if (value == null) {
        unsetMiddleParas();
      } else {
        setMiddleParas((String)value);
      }
      break;

    case LAST_PARA:
      if (value == null) {
        unsetLastPara();
      } else {
        setLastPara((String)value);
      }
      break;

    case TOP_DOMAIN:
      if (value == null) {
        unsetTopDomain();
      } else {
        setTopDomain((String)value);
      }
      break;

    case SUB_DOMAIN:
      if (value == null) {
        unsetSubDomain();
      } else {
        setSubDomain((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MAIN_TEXT:
      return getMainText();

    case TEXT_TYPE:
      return getTextType();

    case TITLE:
      return getTitle();

    case MIDDLE_PARAS:
      return getMiddleParas();

    case LAST_PARA:
      return getLastPara();

    case TOP_DOMAIN:
      return getTopDomain();

    case SUB_DOMAIN:
      return getSubDomain();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MAIN_TEXT:
      return isSetMainText();
    case TEXT_TYPE:
      return isSetTextType();
    case TITLE:
      return isSetTitle();
    case MIDDLE_PARAS:
      return isSetMiddleParas();
    case LAST_PARA:
      return isSetLastPara();
    case TOP_DOMAIN:
      return isSetTopDomain();
    case SUB_DOMAIN:
      return isSetSubDomain();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SentiRequestObject)
      return this.equals((SentiRequestObject)that);
    return false;
  }

  public boolean equals(SentiRequestObject that) {
    if (that == null)
      return false;

    boolean this_present_mainText = true && this.isSetMainText();
    boolean that_present_mainText = true && that.isSetMainText();
    if (this_present_mainText || that_present_mainText) {
      if (!(this_present_mainText && that_present_mainText))
        return false;
      if (!this.mainText.equals(that.mainText))
        return false;
    }

    boolean this_present_textType = true && this.isSetTextType();
    boolean that_present_textType = true && that.isSetTextType();
    if (this_present_textType || that_present_textType) {
      if (!(this_present_textType && that_present_textType))
        return false;
      if (!this.textType.equals(that.textType))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_middleParas = true && this.isSetMiddleParas();
    boolean that_present_middleParas = true && that.isSetMiddleParas();
    if (this_present_middleParas || that_present_middleParas) {
      if (!(this_present_middleParas && that_present_middleParas))
        return false;
      if (!this.middleParas.equals(that.middleParas))
        return false;
    }

    boolean this_present_lastPara = true && this.isSetLastPara();
    boolean that_present_lastPara = true && that.isSetLastPara();
    if (this_present_lastPara || that_present_lastPara) {
      if (!(this_present_lastPara && that_present_lastPara))
        return false;
      if (!this.lastPara.equals(that.lastPara))
        return false;
    }

    boolean this_present_topDomain = true && this.isSetTopDomain();
    boolean that_present_topDomain = true && that.isSetTopDomain();
    if (this_present_topDomain || that_present_topDomain) {
      if (!(this_present_topDomain && that_present_topDomain))
        return false;
      if (!this.topDomain.equals(that.topDomain))
        return false;
    }

    boolean this_present_subDomain = true && this.isSetSubDomain();
    boolean that_present_subDomain = true && that.isSetSubDomain();
    if (this_present_subDomain || that_present_subDomain) {
      if (!(this_present_subDomain && that_present_subDomain))
        return false;
      if (!this.subDomain.equals(that.subDomain))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_mainText = true && (isSetMainText());
    list.add(present_mainText);
    if (present_mainText)
      list.add(mainText);

    boolean present_textType = true && (isSetTextType());
    list.add(present_textType);
    if (present_textType)
      list.add(textType);

    boolean present_title = true && (isSetTitle());
    list.add(present_title);
    if (present_title)
      list.add(title);

    boolean present_middleParas = true && (isSetMiddleParas());
    list.add(present_middleParas);
    if (present_middleParas)
      list.add(middleParas);

    boolean present_lastPara = true && (isSetLastPara());
    list.add(present_lastPara);
    if (present_lastPara)
      list.add(lastPara);

    boolean present_topDomain = true && (isSetTopDomain());
    list.add(present_topDomain);
    if (present_topDomain)
      list.add(topDomain);

    boolean present_subDomain = true && (isSetSubDomain());
    list.add(present_subDomain);
    if (present_subDomain)
      list.add(subDomain);

    return list.hashCode();
  }

  @Override
  public int compareTo(SentiRequestObject other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMainText()).compareTo(other.isSetMainText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMainText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mainText, other.mainText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTextType()).compareTo(other.isSetTextType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTextType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.textType, other.textType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMiddleParas()).compareTo(other.isSetMiddleParas());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMiddleParas()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.middleParas, other.middleParas);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastPara()).compareTo(other.isSetLastPara());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastPara()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastPara, other.lastPara);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopDomain()).compareTo(other.isSetTopDomain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopDomain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topDomain, other.topDomain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubDomain()).compareTo(other.isSetSubDomain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubDomain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subDomain, other.subDomain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SentiRequestObject(");
    boolean first = true;

    sb.append("mainText:");
    if (this.mainText == null) {
      sb.append("null");
    } else {
      sb.append(this.mainText);
    }
    first = false;
    if (isSetTextType()) {
      if (!first) sb.append(", ");
      sb.append("textType:");
      if (this.textType == null) {
        sb.append("null");
      } else {
        sb.append(this.textType);
      }
      first = false;
    }
    if (isSetTitle()) {
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
    }
    if (isSetMiddleParas()) {
      if (!first) sb.append(", ");
      sb.append("middleParas:");
      if (this.middleParas == null) {
        sb.append("null");
      } else {
        sb.append(this.middleParas);
      }
      first = false;
    }
    if (isSetLastPara()) {
      if (!first) sb.append(", ");
      sb.append("lastPara:");
      if (this.lastPara == null) {
        sb.append("null");
      } else {
        sb.append(this.lastPara);
      }
      first = false;
    }
    if (isSetTopDomain()) {
      if (!first) sb.append(", ");
      sb.append("topDomain:");
      if (this.topDomain == null) {
        sb.append("null");
      } else {
        sb.append(this.topDomain);
      }
      first = false;
    }
    if (isSetSubDomain()) {
      if (!first) sb.append(", ");
      sb.append("subDomain:");
      if (this.subDomain == null) {
        sb.append("null");
      } else {
        sb.append(this.subDomain);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (mainText == null) {
      throw new TProtocolException("Required field 'mainText' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SentiRequestObjectStandardSchemeFactory implements SchemeFactory {
    public SentiRequestObjectStandardScheme getScheme() {
      return new SentiRequestObjectStandardScheme();
    }
  }

  private static class SentiRequestObjectStandardScheme extends StandardScheme<SentiRequestObject> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SentiRequestObject struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MAIN_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mainText = iprot.readString();
              struct.setMainTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TEXT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.textType = iprot.readString();
              struct.setTextTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MIDDLE_PARAS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.middleParas = iprot.readString();
              struct.setMiddleParasIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LAST_PARA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastPara = iprot.readString();
              struct.setLastParaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TOP_DOMAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.topDomain = iprot.readString();
              struct.setTopDomainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SUB_DOMAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subDomain = iprot.readString();
              struct.setSubDomainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SentiRequestObject struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.mainText != null) {
        oprot.writeFieldBegin(MAIN_TEXT_FIELD_DESC);
        oprot.writeString(struct.mainText);
        oprot.writeFieldEnd();
      }
      if (struct.textType != null) {
        if (struct.isSetTextType()) {
          oprot.writeFieldBegin(TEXT_TYPE_FIELD_DESC);
          oprot.writeString(struct.textType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.title != null) {
        if (struct.isSetTitle()) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
      }
      if (struct.middleParas != null) {
        if (struct.isSetMiddleParas()) {
          oprot.writeFieldBegin(MIDDLE_PARAS_FIELD_DESC);
          oprot.writeString(struct.middleParas);
          oprot.writeFieldEnd();
        }
      }
      if (struct.lastPara != null) {
        if (struct.isSetLastPara()) {
          oprot.writeFieldBegin(LAST_PARA_FIELD_DESC);
          oprot.writeString(struct.lastPara);
          oprot.writeFieldEnd();
        }
      }
      if (struct.topDomain != null) {
        if (struct.isSetTopDomain()) {
          oprot.writeFieldBegin(TOP_DOMAIN_FIELD_DESC);
          oprot.writeString(struct.topDomain);
          oprot.writeFieldEnd();
        }
      }
      if (struct.subDomain != null) {
        if (struct.isSetSubDomain()) {
          oprot.writeFieldBegin(SUB_DOMAIN_FIELD_DESC);
          oprot.writeString(struct.subDomain);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SentiRequestObjectTupleSchemeFactory implements SchemeFactory {
    public SentiRequestObjectTupleScheme getScheme() {
      return new SentiRequestObjectTupleScheme();
    }
  }

  private static class SentiRequestObjectTupleScheme extends TupleScheme<SentiRequestObject> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SentiRequestObject struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.mainText);
      BitSet optionals = new BitSet();
      if (struct.isSetTextType()) {
        optionals.set(0);
      }
      if (struct.isSetTitle()) {
        optionals.set(1);
      }
      if (struct.isSetMiddleParas()) {
        optionals.set(2);
      }
      if (struct.isSetLastPara()) {
        optionals.set(3);
      }
      if (struct.isSetTopDomain()) {
        optionals.set(4);
      }
      if (struct.isSetSubDomain()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetTextType()) {
        oprot.writeString(struct.textType);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetMiddleParas()) {
        oprot.writeString(struct.middleParas);
      }
      if (struct.isSetLastPara()) {
        oprot.writeString(struct.lastPara);
      }
      if (struct.isSetTopDomain()) {
        oprot.writeString(struct.topDomain);
      }
      if (struct.isSetSubDomain()) {
        oprot.writeString(struct.subDomain);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SentiRequestObject struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.mainText = iprot.readString();
      struct.setMainTextIsSet(true);
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.textType = iprot.readString();
        struct.setTextTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.middleParas = iprot.readString();
        struct.setMiddleParasIsSet(true);
      }
      if (incoming.get(3)) {
        struct.lastPara = iprot.readString();
        struct.setLastParaIsSet(true);
      }
      if (incoming.get(4)) {
        struct.topDomain = iprot.readString();
        struct.setTopDomainIsSet(true);
      }
      if (incoming.get(5)) {
        struct.subDomain = iprot.readString();
        struct.setSubDomainIsSet(true);
      }
    }
  }

}

